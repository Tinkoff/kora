/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) ({{{generatorVersion}}}).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package {{apiPackage}}


import ru.tinkoff.kora.common.Module
import ru.tinkoff.kora.common.Tag
import ru.tinkoff.kora.common.DefaultComponent;
import ru.tinkoff.kora.config.common.extractor.ConfigValueExtractor
import com.typesafe.config.Config

import ru.tinkoff.kora.http.client.common.interceptor.*
import ru.tinkoff.kora.http.common.auth.*
import ru.tinkoff.kora.http.client.common.auth.*


@Module
//@ru.tinkoff.kora.common.annotation.Generated("openapi generator kora client")
interface ApiSecurity {
{{#authMethods}}

    class {{#lambda.classname}}{{name}}{{/lambda.classname}}

{{#isApiKey}}
    @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class)
    fun {{name}}Config(config: Config): String {
        val configPath = "{{#hasSecurityConfigPrefix}}{{securityConfigPrefix}}.{{/hasSecurityConfigPrefix}}{{name}}"
        return config.getString(configPath)
    }

    @DefaultComponent
    @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class)
    fun {{name}}HttpClientInterceptor(@Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class) apiKey: String): ApiKeyHttpClientInterceptor {
        val paramLocation = ApiKeyHttpClientInterceptor.ApiKeyLocation.{{#isKeyInQuery}}QUERY{{/isKeyInQuery}}{{#isKeyInHeader}}HEADER{{/isKeyInHeader}}{{#isKeyInCookie}}COOKIE{{/isKeyInCookie}}
        return ApiKeyHttpClientInterceptor(paramLocation, "{{keyParamName}}", apiKey)
    }
{{/isApiKey}}{{#isBasicBasic}}
    data class {{#lambda.classname}}{{name}}{{/lambda.classname}}Config(val username: String, val password: String)

    fun {{name}}Config(config: Config, extractor: ConfigValueExtractor<{{#lambda.classname}}{{name}}{{/lambda.classname}}Config>): {{#lambda.classname}}{{name}}{{/lambda.classname}}Config {
        val configPath = "{{#hasSecurityConfigPrefix}}{{securityConfigPrefix}}.{{/hasSecurityConfigPrefix}}{{name}}"
        return extractor.extract(config.getValue(configPath))
    }

    @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class)
    fun {{name}}BasicAuthHttpClientTokenProvider(config: {{#lambda.classname}}{{name}}{{/lambda.classname}}Config): BasicAuthHttpClientTokenProvider {
        return BasicAuthHttpClientTokenProvider(config.username, config.password)
    }

    @DefaultComponent
    @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class)
    fun {{name}}HttpClientInterceptor(@Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class) provider: BasicAuthHttpClientTokenProvider): BasicAuthHttpClientInterceptor {
        return BasicAuthHttpClientInterceptor(provider)
    }
{{/isBasicBasic}}{{#isBasicBearer}}
    @DefaultComponent
    @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class)
    fun {{name}}HttpClientInterceptor(@Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class) tokenProvider: HttpClientTokenProvider): BearerAuthHttpClientInterceptor {
        return BearerAuthHttpClientInterceptor(tokenProvider)
    }
{{/isBasicBearer}}{{#isOAuth}}
    @DefaultComponent
    @Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class)
    fun {{name}}HttpClientInterceptor(@Tag(ApiSecurity.{{#lambda.classname}}{{name}}{{/lambda.classname}}::class) tokenProvider: HttpClientTokenProvider): BearerAuthHttpClientInterceptor {
        return BearerAuthHttpClientInterceptor(tokenProvider)
    }
{{/isOAuth}}{{/authMethods}}
}
